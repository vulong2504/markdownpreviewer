{"version":3,"sources":["components/Input.js","components/Output.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","style","padding","TextField","marginTop","id","label","multiline","fullWidth","rows","defaultValue","def","variant","onChange","change","marked","require","Output","dangerouslySetInnerHTML","__html","this","out","React","Component","App","handleInput","e","setState","input","target","value","state","placeholder","Container","maxWidth","Grid","item","xs","textAlign","color","background","borderRadius","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAwBeA,EArBH,SAACC,GACT,OACI,yBAAKC,MAAO,CAACC,QAAQ,uBAEjB,kBAACC,EAAA,EAAD,CACIF,MAAO,CAACG,UAAU,QAClBC,GAAG,SACHC,MAAM,QACNC,WAAS,EACTC,WAAS,EACTC,KAAK,KACLC,aAAcV,EAAMW,IACpBC,QAAQ,WACRC,SAAUb,EAAMc,WCd5BC,EAASC,EAAQ,IAaNC,E,iLARX,OACE,yBAAKZ,GAAG,UACNa,wBAAyB,CAAEC,OAAQJ,EAAOK,KAAKpB,MAAMqB,Y,GALxCC,IAAMC,W,gBCGrBC,E,YACJ,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRyB,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SANhC,EAAKC,MAAQ,CACXH,MAAOI,GAHQ,E,sEAcjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,wBAAIpC,MAAO,CAAEqC,UAAW,SAAUC,MAAO,SAAzC,sBACA,wBAAItC,MAAO,CAACqC,UAAU,WAAtB,eAEF,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIpC,MAAO,CAAEuC,WAAY,QAASC,aAAa,SAC5D,kBAAC,EAAD,CAAO9B,IAAKS,KAAKW,MAAMH,MAAOd,OAAQM,KAAKK,gBAM7C,yBAAMxB,MAAO,CAAEuC,WAAY,QAASpC,UAAU,OAASqC,aAAa,OAAOvC,QAAS,wBAClF,wBAAID,MAAO,CAACqC,UAAU,SAAUI,WAAW,OAAQH,MAAM,QAAzD,WACA,kBAAC,EAAD,CAAQlB,IAAKD,KAAKW,MAAMH,c,GA/BlBN,IAAMC,WAuClBS,EAAW,+oCA+CFR,ICjFKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce253e4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Input=(props)=>{\r\n    return (\r\n        <div style={{padding:\"0px 20px 20px 20px\"\r\n         }}>\r\n            <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                id=\"editor\"\r\n                label=\"INPUT\"\r\n                multiline\r\n                fullWidth\r\n                rows=\"20\"\r\n                defaultValue={props.def}\r\n                variant=\"outlined\"\r\n                onChange={props.change}\r\n                \r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nlet marked = require('marked');\r\n\r\nclass Output extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: marked(this.props.out) }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;","import React from 'react';\nimport './App.css';\nimport Input from './components/Input';\nimport Output from './components/Output';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: placeholder\n    }\n  }\n\n  handleInput = (e) => {\n    this.setState({ input: e.target.value });\n\n\n  };\n\n  render() {\n    return (\n      <div>\n        <Container maxWidth=\"sm\" >\n          <Grid item xs={12}>\n            <h1 style={{ textAlign: \"center\" ,color: \"blue\"}}>MARKDOWN PREVIEWER</h1>\n            <h5 style={{textAlign:\"center\"}}>by Vu Long</h5>\n          </Grid>\n          <Grid item xs={12} style={{ background: \"white\", borderRadius:\"10px\" }}>\n            <Input def={this.state.input} change={this.handleInput} />\n          </Grid>\n        </Container>\n\n          {/* <Grid style={{ padding: \"20px 20px 20px 20px\"}} item xs={12} >\n          </Grid> */}\n          <div  style={{ background: \"white\", marginTop:\"40px\" , borderRadius:\"10px\",padding: \"20px 20px 20px 20px\" }}>\n            <h2 style={{textAlign:\"center\", paddingTop:\"30px\", color:\"red\"}}>Output:</h2>\n            <Output out={this.state.input} />\n          </div>\n \n      </div>\n    );\n  }\n}\n\nconst placeholder =\n  `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction Example(first,last){\n  if (first =='\\`\\`\\`'&&last=='\\`\\`\\`'){\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}